// @strict-types


#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
ВидыТекущейНоменклатуры = Новый СписокЗначений();
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Код процедур и функций

#КонецОбласти
#Область ОбработчикиСобытийЭлементовТаблицыФормыЗатратыИПоступления
&НаКлиенте
Процедура ЗатратыИПоступленияВидОперацииНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
//	Элемент.СписокВыбора.Очистить();
	
	//СтандартнаяОбработка = Ложь;
//	Если Элемент.СписокВыбора.Количество() = 0 Тогда
//		//@skip-check typed-value-adding-to-untyped-collection
//		Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидКонтргаента.Внешний"),	"Внешний источник");
//		//@skip-check typed-value-adding-to-untyped-collection
//		Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидКонтргаента.Внутренний"),	"Внутренний источник");
//		//@skip-check typed-value-adding-to-untyped-collection
//		Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидНоменклатуры.КоммунальныеПлатежи"),	"Коммуналка");
//		//@skip-check typed-value-adding-to-untyped-collection
//		Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидНоменклатуры.Товар"),	"Товар");
//		//@skip-check typed-value-adding-to-untyped-collection
//		Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидНоменклатуры.Услуга"),	"Услуга");
//		//Элементы.ЗатратыИПоступления.Доступность = Истина;
//	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыИПоступленияНомеклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
		ТекущиеДанные = Элементы.ЗатратыИПоступления.ТекущиеДанные;
		//@skip-check property-return-type
		//@skip-check statement-type-change
		ТекущиеДанные.ЕдинцаИзмерения = ВыбранноеЗначение.ЕдиницаИзмерения;
		
//		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ИсточникиДенежныхСредств") Тогда
//			ТекущиеДанные.ЕдинцаИзмерения = ВыбранноеЗначение.ЕдиницаИзмерения;			
//		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
//			ТекущиеДанные.ЕдинцаИзмерения = ВыбранноеЗначение.ЕдиницаИзмерения;			
//		КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыИПоступленияКоличествоОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
		ТекущиеДанные = Элементы.ЗатратыИПоступления.ТекущиеДанные;
		ТекущиеДанные.Сумма = Текст*ТекущиеДанные.Цена;
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыИПоступленияЦенаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
		ТекущиеДанные = Элементы.ЗатратыИПоступления.ТекущиеДанные;
		ТекущиеДанные.Сумма = Текст*ТекущиеДанные.Количество;
КонецПроцедуры



&НаКлиенте
Процедура ЗатратыИПоступленияВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.ЗатратыИПоступления.ТекущиеДанные;
	Если ВыбранноеЗначение <> ТекущиеДанные.ВидОперации Тогда 
		ТекущиеДанные.Номеклатура = Неопределено;
		ТекущиеДанные.ЕдинцаИзмерения = Неопределено;
		ТекущиеДанные.Количество = Неопределено;
		ТекущиеДанные.Цена = Неопределено;
		ТекущиеДанные.Сумма = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыИПоступленияНомеклатураНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ЗатратыИПоступления.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидОперации = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Элемент.СписокВыбора.Очистить();
	//ВидКонтрагентаВнешний = ПредопределенноеЗначение("Перечисление.ВидКонтрагента.Внешний");
	//ВидКонтрагентаВнутренний = ПредопределенноеЗначение("Перечисление.ВидКонтрагента.Внутренний");
	ВидНоменклатурыТовар = ПредопределенноеЗначение("Перечисление.ВидНоменклатуры.Товар");
	ВидНоменклатурыУслуга = ПредопределенноеЗначение("Перечисление.ВидНоменклатуры.Услуга");
	ВидноменклатурыЗатратыНаКоммуналку = ПредопределенноеЗначение("Перечисление.ВидНоменклатуры.КоммунальныеПлатежи");
	ВидНоменклатурыИсточникИлиПотребительСредств = ПредопределенноеЗначение("Перечисление.ВидНоменклатуры.ИсточникИлиПотребительСредств");
	
	ВидОперацииОплатаТоваровИУслуг = ПредопределенноеЗначение("Перечисление.ВидОперации.ОплатаТоваровИУслуг");
	ВидОперацииПереводВходящий = ПредопределенноеЗначение("Перечисление.ВидОперации.ПереводВходящий");
	ВидОперацииПереводИсходящий = ПредопределенноеЗначение("Перечисление.ВидОперации.ПереводИсходящий");
	ВидОперацииПолучениеНаличных = ПредопределенноеЗначение("Перечисление.ВидОперации.ПолучениеНаличных");
	ВидОперацииПередачаНаличных = ПредопределенноеЗначение("Перечисление.ВидОперации.ПередачаНаличных");

	

	ФормаВыбораПуть = "";	
	ОтобранныеЭлементы = Новый Структура();
	ФормаВыбораПуть = "Справочник.Номенклатура.ФормаВыбора";
	Если ТекущиеДанные.ВидОперации = ВидОперацииОплатаТоваровИУслуг Тогда
		ТоварыИУслуги = ОбщийМодульПокупкиВызовСервера.ПолучитьНоменклатуру(ВидНоменклатурыТовар);
		Услуги = ОбщийМодульПокупкиВызовСервера.ПолучитьНоменклатуру(ВидНоменклатурыУслуга);
        СлужебныеПроцедуры.ЗаполнитьМассивУникальнымиЗначениями(ТоварыИУслуги, Услуги);
        
	 	ОтобранныеЭлементы.Вставить("Ссылка",ТоварыИУслуги) ;
	 	ВидыТекущейНоменклатуры.Добавить(ВидНоменклатурыТовар,"Товар",,);
	 	ВидыТекущейНоменклатуры.Добавить(ВидНоменклатурыУслуга,"Услуга",,);
	 	
	КонецЕсли;
	
	Если	ТекущиеДанные.ВидОперации = ВидОперацииПереводВходящий 
		ИЛИ ТекущиеДанные.ВидОперации = ВидОперацииПолучениеНаличных
		ИЛИ ТекущиеДанные.ВидОперации = ВидОперацииПереводИсходящий 
		ИЛИ ТекущиеДанные.ВидОперации = ВидОперацииПередачаНаличных Тогда
		
			ИсточникиВходящихДенежныхСредств = ОбщийМодульПокупкиВызовСервера.ПолучитьНоменклатуру(ВидНоменклатурыИсточникИлиПотребительСредств);
		 	ОтобранныеЭлементы.Вставить("Ссылка",ИсточникиВходящихДенежныхСредств);
			ВидыТекущейНоменклатуры.Добавить(ВидНоменклатурыИсточникИлиПотребительСредств,"Источник или потребитель денежных средств",,);
	КонецЕсли;
	Если	ТекущиеДанные.ВидОперации = ВидноменклатурыЗатратыНаКоммуналку  Тогда
		
			КоммунальныеПлатежи = ОбщийМодульПокупкиВызовСервера.ПолучитьНоменклатуру(ВидноменклатурыЗатратыНаКоммуналку);
		 	ОтобранныеЭлементы.Вставить("Ссылка",КоммунальныеПлатежи);
			ВидыТекущейНоменклатуры.Добавить(ВидноменклатурыЗатратыНаКоммуналку,"Коммунальный платеж",,);
	КонецЕсли;
//ОткрытьФорму("Справочник.ИсточникиДенежныхСредств.ФормаВыбора"
	ПараметрыФормы = Новый Структура("Отбор",ОтобранныеЭлементы);
	ОткрытьФорму(ФормаВыбораПуть,ПараметрыФормы,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыИПоступленияНомеклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ЗатратыИПоступления.ТекущиеДанные;
	МассивВидовНоменклатуры = ПолучитьМассивВидовНоменклурыПоТипуОперации(ТекущиеДанные.ВидОперации);
	Если СтрДлина(Текст)>2 Тогда
		ДанныеВыбора = Новый СписокЗначений();
	//	СписокНоменклатуры=  Новый Массив;
		Для Каждого вид_номеклатуры из МассивВидовНоменклатуры Цикл 
			СписокНоменклатуры =
				 ОбщийМодульПокупкиВызовСервера.ПолучитьНоменклатуру(вид_номеклатуры,"%" +Текст +"%");
				Если СписокНоменклатуры.Количество()>0 Тогда 
					ДанныеВыбора.ЗагрузитьЗначения(СписокНоменклатуры);
				КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыИПоступленияНомеклатураИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	//TODO: Вставить содержимое обработчика
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

// Код процедур и функций

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьМассивВидовНоменклурыПоТипуОперации(ВидОперации = Неопределено) 
	СписокВидовНомеклатуры = Новый Массив();
	ВидНоменклатурыТовар = ПредопределенноеЗначение("Перечисление.ВидНоменклатуры.Товар");
	ВидНоменклатурыУслуга = ПредопределенноеЗначение("Перечисление.ВидНоменклатуры.Услуга");
	ВидноменклатурыЗатратыНаКоммуналку = ПредопределенноеЗначение("Перечисление.ВидНоменклатуры.КоммунальныеПлатежи");
	ВидНоменклатурыИсточникИлиПотребительСредств = ПредопределенноеЗначение("Перечисление.ВидНоменклатуры.ИсточникИлиПотребительСредств");
	
	ВидОперацииОплатаТоваровИУслуг = ПредопределенноеЗначение("Перечисление.ВидОперации.ОплатаТоваровИУслуг");
	ВидОперацииПереводВходящий = ПредопределенноеЗначение("Перечисление.ВидОперации.ПереводВходящий");
	ВидОперацииПереводИсходящий = ПредопределенноеЗначение("Перечисление.ВидОперации.ПереводИсходящий");
	ВидОперацииПолучениеНаличных = ПредопределенноеЗначение("Перечисление.ВидОперации.ПолучениеНаличных");
	ВидОперацииПередачаНаличных = ПредопределенноеЗначение("Перечисление.ВидОперации.ПередачаНаличных");
	
	Если ВидОперации = ВидОперацииОплатаТоваровИУслуг Тогда
		//@skip-check typed-value-adding-to-untyped-collection
		СписокВидовНомеклатуры.Добавить(ВидНоменклатурыТовар);
	 	//@skip-check typed-value-adding-to-untyped-collection
	 	СписокВидовНомеклатуры.Добавить(ВидНоменклатурыУслуга);
	КонецЕсли;
	Если	ВидОперации = ВидОперацииПереводВходящий 
		ИЛИ ВидОперации = ВидОперацииПолучениеНаличных
		ИЛИ ВидОперации = ВидОперацииПереводИсходящий 
		ИЛИ ВидОперации = ВидОперацииПередачаНаличных Тогда
			//@skip-check typed-value-adding-to-untyped-collection
			СписокВидовНомеклатуры.Добавить(ВидНоменклатурыИсточникИлиПотребительСредств);
	КонецЕсли;
	Если	ВидОперации = ВидноменклатурыЗатратыНаКоммуналку  Тогда
			//@skip-check typed-value-adding-to-untyped-collection
			СписокВидовНомеклатуры.Добавить(ВидноменклатурыЗатратыНаКоммуналку);
	КонецЕсли;
	
	Возврат СписокВидовНомеклатуры;
КонецФункции

Функция ПолучитьСписокСсылокНомеклатуры(МассивВидовНомеклаутуры = Неопределено)
		СписокСсылокНомеклатуры = Новый СписокЗначений();
		//@skip-check invocation-parameter-type-intersect
		//@skip-check typed-value-adding-to-untyped-collection
		СписокСсылокНомеклатуры.Добавить("Ссылка",Новый Массив());
		//@skip-check variable-value-type
		Для Каждого вид_номенклатуры из МассивВидовНомеклаутуры Цикл 
			//@skip-check invocation-parameter-type-intersect
			//@skip-check typed-value-adding-to-untyped-collection
			//@skip-check dynamic-access-method-not-found
			СписокСсылокНомеклатуры.Получить("Ссылка").Значение.Добавить(ОбщийМодульПокупкиВызовСервера.ПолучитьНоменклатуру(вид_номенклатуры));
		КонецЦикла;
		Возврат СписокСсылокНомеклатуры;
КонецФункции
#КонецОбласти
