// @strict-types


#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Код процедур и функций

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Код процедур и функций

#КонецОбласти
#Область ОбработчикиСобытийЭлементовТаблицыФормыЗатратыИПоступления
&НаКлиенте
Процедура ЗатратыИПоступленияВидОперацииНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	//СтандартнаяОбработка = Ложь;
	//@skip-check typed-value-adding-to-untyped-collection
	Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидИсточникаФинансирования.Внешний"),	"Внешний источник");
	//@skip-check typed-value-adding-to-untyped-collection
	Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидИсточникаФинансирования.Внутренний"),	"Внутренний источник");
	//@skip-check typed-value-adding-to-untyped-collection
	Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидНоменклатуры.КоммунальныеПлатежи"),	"Коммуналка");
	//@skip-check typed-value-adding-to-untyped-collection
	Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидНоменклатуры.Товар"),	"Товар");
	//@skip-check typed-value-adding-to-untyped-collection
	Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидНоменклатуры.Услуга"),	"Услуга");
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыИПоступленияЗатратаПоступлениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ЗатратыИПоступления.ТекущиеДанные;
	Элемент.СписокВыбора.Очистить();
	ВидОперацииВнешнееФинансирование = ПредопределенноеЗначение("Перечисление.ВидИсточникаФинансирования.Внешний");
	ВидОперацииВнутреннееФинансирование = ПредопределенноеЗначение("Перечисление.ВидИсточникаФинансирования.Внутренний");
	ВидОперацииЗатратыНаТовар = ПредопределенноеЗначение("Перечисление.ВидНоменклатуры.Товар");
	ВидОперацииЗатратыНаУслуги = ПредопределенноеЗначение("Перечисление.ВидНоменклатуры.Услуга");
	ВидОперацииЗатратыНаКоммуналку = ПредопределенноеЗначение("Перечисление.ВидНоменклатуры.КоммунальныеПлатежи");
	ФормаВыборПуть = "";	
	ОтобранныеЭлементы = Новый Структура();
	Если ТекущиеДанные.ВидОперации = ВидОперацииВнешнееФинансирование Тогда
		ОтобранныеЭлементы.Вставить("Ссылка",ОбщийМодульПокупкиВызовСервера.ИсточникиФинансированияПоВиду(ТекущиеДанные.ВидОперации)) ;
		ФормаВыборПуть = "Справочник.ИсточникиДенежныхСредств.ФормаВыбора";
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Отбор",ОтобранныеЭлементы);
	ОткрытьФорму(ФормаВыборПуть,ПараметрыФормы,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыИПоступленияЗатратаПоступлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ИсточникиДенежныхСредств") Тогда
			
		КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

// Код процедур и функций

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция СоздатьНовыйДокументПолученияСредств(Знач ВидИсточникаСредстве = Неопределено) 
	ДокументПоступленияСредств = Документы.ПолучитьСредстваИзВнешнегоИсточника.СоздатьДокумент();
	ДокументПоступленияСредств.ВидИсточника = ВидИсточникаСредстве;
	Возврат  ДокументПоступленияСредств;
КонецФункции

#КонецОбласти
