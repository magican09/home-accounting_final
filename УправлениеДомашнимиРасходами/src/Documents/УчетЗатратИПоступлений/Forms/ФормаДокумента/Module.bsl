// @strict-types


#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Код процедур и функций

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Код процедур и функций

#КонецОбласти
#Область ОбработчикиСобытийЭлементовТаблицыФормыЗатратыИПоступления
&НаКлиенте
Процедура ЗатратыИПоступленияВидОперацииНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
//	Элемент.СписокВыбора.Очистить();
	
	//СтандартнаяОбработка = Ложь;
//	Если Элемент.СписокВыбора.Количество() = 0 Тогда
//		//@skip-check typed-value-adding-to-untyped-collection
//		Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидКонтргаента.Внешний"),	"Внешний источник");
//		//@skip-check typed-value-adding-to-untyped-collection
//		Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидКонтргаента.Внутренний"),	"Внутренний источник");
//		//@skip-check typed-value-adding-to-untyped-collection
//		Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидНоменклатуры.КоммунальныеПлатежи"),	"Коммуналка");
//		//@skip-check typed-value-adding-to-untyped-collection
//		Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидНоменклатуры.Товар"),	"Товар");
//		//@skip-check typed-value-adding-to-untyped-collection
//		Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидНоменклатуры.Услуга"),	"Услуга");
//		//Элементы.ЗатратыИПоступления.Доступность = Истина;
//	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыИПоступленияЗатратаПоступлениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ЗатратыИПоступления.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидОперации = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Элемент.СписокВыбора.Очистить();
	ВидИсточникаВнешнееФинансирование = ПредопределенноеЗначение("Перечисление.ВидКонтргаента.Внешний");
	ВидИсточникаВнутреннееФинансирование = ПредопределенноеЗначение("Перечисление.ВидКонтргаента.Внутренний");
	ВидНоменклатурыТовар = ПредопределенноеЗначение("Перечисление.ВидНоменклатуры.Товар");
	ВидНоменклатурыУслуга = ПредопределенноеЗначение("Перечисление.ВидНоменклатуры.Услуга");
	ВидКонтрагентаЗатратыНаКоммуналку = ПредопределенноеЗначение("Перечисление.ВидНоменклатуры.КоммунальныеПлатежи");

	ВидОперацииОплатаТоваровИУслуг = ПредопределенноеЗначение("Перечисление.ВидОперации.ОплатаТоваровИУслуг");
	ВидОперацииПереводВходящий = ПредопределенноеЗначение("Перечисление.ВидОперации.ПереводВходящий");
	ВидОперацииПереводИсходящий = ПредопределенноеЗначение("Перечисление.ВидОперации.ПереводИсходящий");
	ВидОперацииПлучениеНаличных = ПредопределенноеЗначение("Перечисление.ВидОперации.ПолучениеНаличных");
	ВидОперацииПлучениеНаличных = ПредопределенноеЗначение("Перечисление.ВидОперации.ПередачаНаличных");
	

	ФормаВыборПуть = "";	
	ОтобранныеЭлементы = Новый Структура();

	Если ТекущиеДанные.ВидОперации = ВидОперацииОплатаТоваровИУслуг Тогда
		Товары = ОбщийМодульПокупкиВызовСервера.НоменклатураПоВиду(ВидНоменклатурыТовар);
		Услуги = ОбщийМодульПокупкиВызовСервера.НоменклатураПоВиду(ВидНоменклатурыУслуга);
		 ЗаполнитьМассивУникальнымиЗначениями(Товары, Услуги);
		 
		ОтобранныеЭлементы.Вставить("Ссылка",ОбщийМодульПокупкиВызовСервера.НоменклатураПоВиду(ВидКонтрагентаЗатратыНаТовар)) ;
		
		ФормаВыборПуть = "Справочник.Номенклатура.ФормаВыбора";
	КонецЕсли;
//	Если ТекущиеДанные.ВидОперации = ВидОперацииЗатратыНаУслуги Тогда
//		ОтобранныеЭлементы.Вставить("Ссылка",ОбщийМодульПокупкиВызовСервера.НоменклатураПоВиду(ТекущиеДанные.ВидОперации)) ;
//		ФормаВыборПуть = "Справочник.Номенклатура.ФормаВыбора";
//	КонецЕсли;
//	Если ТекущиеДанные.ВидОперации = ВидОперацииЗатратыНаКоммуналку Тогда
//		ОтобранныеЭлементы.Вставить("Ссылка",ОбщийМодульПокупкиВызовСервера.НоменклатураПоВиду(ТекущиеДанные.ВидОперации)) ;
//		ФормаВыборПуть = "Справочник.Номенклатура.ФормаВыбора";
//	КонецЕсли;
//	Если ТекущиеДанные.ВидОперации = ВидОперацииОплатаТоваровИУслуг Тогда
//		ОтобранныеЭлементы.Вставить("Ссылка",ОбщийМодульПокупкиВызовСервера.ИсточникиФинансированияПоВиду(ТекущиеДанные.ВидОперации)) ;
//		ФормаВыборПуть = "Справочник.ИсточникиДенежныхСредств.ФормаВыбора";
//	КонецЕсли;
//	Если ТекущиеДанные.ВидОперации = ВидОперацииВнутреннееФинансирование Тогда
//		ОтобранныеЭлементы.Вставить("Ссылка",ОбщийМодульПокупкиВызовСервера.ИсточникиФинансированияПоВиду(ТекущиеДанные.ВидОперации)) ;
//		ФормаВыборПуть = "Справочник.ИсточникиДенежныхСредств.ФормаВыбора";
//	КонецЕсли;
	ПараметрыФормы = Новый Структура("Отбор",ОтобранныеЭлементы);
	ОткрытьФорму(ФормаВыборПуть,ПараметрыФормы,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыИПоступленияЗатратаПоступлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	
		ТекущиеДанные = Элементы.ЗатратыИПоступления.ТекущиеДанные;
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ИсточникиДенежныхСредств") Тогда
			ТекущиеДанные.ЕдинцаИзмерения = ВыбранноеЗначение.ЕдиницаИзмерения;			
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
			ТекущиеДанные.ЕдинцаИзмерения = ВыбранноеЗначение.ЕдиницаИзмерения;			
		КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыИПоступленияКоличествоОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
		ТекущиеДанные = Элементы.ЗатратыИПоступления.ТекущиеДанные;
		ТекущиеДанные.Сумма = Текст*ТекущиеДанные.Цена;
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыИПоступленияЦенаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
		ТекущиеДанные = Элементы.ЗатратыИПоступления.ТекущиеДанные;
		ТекущиеДанные.Сумма = Текст*ТекущиеДанные.Количество;
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыИПоступленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Для Каждого запись из Объект.ЗатратыИПоступления Цикл 
	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыИПоступленияВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.ЗатратыИПоступления.ТекущиеДанные;
	Если ВыбранноеЗначение <> ТекущиеДанные.ВидОперации Тогда 
		ТекущиеДанные.ЗатратаПоступление = Неопределено;
		ТекущиеДанные.ЕдинцаИзмерения = Неопределено;
		ТекущиеДанные.Количество = Неопределено;
		ТекущиеДанные.Цена = Неопределено;
		ТекущиеДанные.Сумма = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

// Код процедур и функций

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//@skip-check method-param-value-type
Процедура ЗаполнитьМассивУникальнымиЗначениями(МассивПриемник, МассивИсточник) Экспорт
	
	//@skip-check variable-value-type
	Для Каждого Элемент Из МассивИсточник Цикл
		
		//@skip-check dynamic-access-method-not-found
		Если МассивПриемник.Найти(Элемент) = Неопределено Тогда
			
			//@skip-check typed-value-adding-to-untyped-collection
			МассивПриемник.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СоздатьНовыйДокументПолученияСредств(Знач ВидИсточникаСредстве = Неопределено) 
	ДокументПоступленияСредств = Документы.ПолучитьСредстваИзВнешнегоИсточника.СоздатьДокумент();
	ДокументПоступленияСредств.ВидИсточника = ВидИсточникаСредстве;
	Возврат  ДокументПоступленияСредств;
КонецФункции

#КонецОбласти
